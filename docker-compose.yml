version: '3.8'

services:
  app:
    build:
      context: ./docker/php
    container_name: laravel-app
    working_dir: /var/www/html
    volumes:
      - ./src:/var/www/html
    ports:
      - "9000:9000"
    networks:
      - laravel-network
    environment:
      - PHP_OPCACHE_VALIDATE_TIMESTAMPS=1
      - APP_ENV=local
    depends_on:
      - mysql

  webserver:
    image: nginx:latest
    container_name: nginx-server
    ports:
      - "8080:80"
    volumes:
      - ./src:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - laravel-network
    depends_on:
      - app

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: unless-stopped
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_USER: admin
      MYSQL_PASSWORD: Admin@123
      MYSQL_ROOT_PASSWORD: admin
    networks:
      - laravel-network
    volumes:
      - mysql_data:/var/lib/mysql


  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql  # Ensure this matches the service name of your MySQL container
      MYSQL_ROOT_PASSWORD: admin
    networks:
      - laravel-network


  nodejs:
    image: node:20
    container_name: nodejs
    working_dir: /var/www/html
    volumes:
      - ./src:/var/www/html
    networks:
      - laravel-network
    command: sh -c "npm install && tail -f /dev/null"

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - laravel-network

  composer:
    build:
      context: ./docker/composer
      dockerfile: Dockerfile.dev
      args:
        - PHPUSER=${PHPUSER:-www-data}
        - PHPGROUP=${PHPGROUP:-www-data}
    container_name: composer
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    depends_on:
      - app
    user: ${PHPUSER:-www-data}
    entrypoint: ["/bin/sh", "-c", "composer install --ignore-platform-reqs && tail -f /dev/null"]
    networks:
      - laravel-network

  artisan:
    build:
      context: ./docker/php
      dockerfile: Dockerfile
      args:
        - PHPUSER=${PHPUSER:-www-data}
        - PHPGROUP=${PHPGROUP:-www-data}
    container_name: artisan
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    entrypoint: ["php", "/var/www/html/artisan", "serve", "--host=0.0.0.0", "--port=8000"]
    networks:
      - laravel-network

networks:
  laravel-network:

volumes:
  mysql_data:
